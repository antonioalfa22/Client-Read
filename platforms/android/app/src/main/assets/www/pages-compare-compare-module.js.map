{"version":3,"sources":["webpack:///./src/app/pages/compare/compare.module.ts","webpack:///./src/app/pages/compare/compare.page.html","webpack:///./src/app/pages/compare/compare.page.scss","webpack:///./src/app/pages/compare/compare.page.ts","webpack:///./src/app/services/device-read/device-read.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEA;AAC0B;AAEvE,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACvB;CACF,CAAC;AAaF;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAX7B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,gEAAc;gBACd,oEAAkB;gBAClB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,yDAAW,CAAC;SAC5B,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;AC5B9B,m3CAAm3C,aAAa,iVAAiV,4BAA4B,gVAAgV,uBAAuB,4MAA4M,0BAA0B,4HAA4H,0BAA0B,0CAA0C,oBAAoB,6JAA6J,0BAA0B,qHAAqH,0BAA0B,2CAA2C,qBAAqB,4RAA4R,qBAAqB,oMAAoM,2BAA2B,41BAA41B,YAAY,iVAAiV,qBAAqB,gVAAgV,gBAAgB,4MAA4M,0BAA0B,4HAA4H,0BAA0B,0CAA0C,aAAa,6JAA6J,0BAA0B,qHAAqH,0BAA0B,2CAA2C,cAAc,4RAA4R,cAAc,oMAAoM,2BAA2B,2I;;;;;;;;;;;ACA7wM,8BAA8B,sBAAsB,EAAE,+CAA+C,2a;;;;;;;;;;;;;;;;;;;;;;ACAhB;AACpB;AACM;AACV;AAC4B;AAChD;AAOzC;IAQE,qBACU,SAAwB,EACxB,aAAgC,EAChC,OAAoB,EACpB,MAAc;QAHd,cAAS,GAAT,SAAS,CAAe;QACxB,kBAAa,GAAb,aAAa,CAAmB;QAChC,YAAO,GAAP,OAAO,CAAa;QACpB,WAAM,GAAN,MAAM,CAAQ;QATxB,qBAAgB,GAAa,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAU9E,CAAC;IAED,8BAAQ,GAAR;QACE,IAAI,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;IACjD,CAAC;IAED,iCAAW,GAAX,UAAY,IAAI;QACd,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,0CAAoB,GAApB,UAAqB,IAAI;QAAzB,iBAwBC;QAvBC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,aAAG;YAC1C,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;gBACrB,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5D,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,kBAAkB,EAAE;gBACxF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACrB;YACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAS,CAAC,EAAC,CAAC;gBAC3B,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBACrE,OAAO,CAAC,CAAC;iBACV;qBACI,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC1E,OAAO,CAAC,CAAC,CAAC;iBACX;gBACD,OAAO,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,kBAAkB,GAAG,IAAI,oEAAkB,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,EAAG,aAAG;YACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxB,KAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YACtB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qCAAe,GAAf,UAAgB,IAAI;QAApB,iBAYC;QAXC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,eAAK;YAAK,KAAK,CAAC,SAAS,CAAC,aAAG;gBACpE,IAAI,IAAI,GAAG,EAAE,CAAC;gBACd,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;oBACrB,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAClD,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC/E,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;iBACrB;gBACD,KAAI,CAAC,cAAc,GAAG,IAAI,oEAAkB,CAAC,IAAI,CAAC,CAAC;YACrD,CAAC,EAAG,aAAG;gBACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC;QAAA,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAc,GAAd,UAAe,aAAkB;QAC/B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IA3DwB;QAAxB,+DAAS,CAAC,8DAAY,CAAC;wEAAY,8DAAY;kDAAC;IAPtC,WAAW;QALvB,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,qGAAkC;;SAEnC,CAAC;+EAUqB,6EAAa;YACT,2FAAiB;YACvB,uEAAW;YACZ,sDAAM;OAZb,WAAW,CAmEvB;IAAD,kBAAC;CAAA;AAnEuB;;;;;;;;;;;;;;;;;;;;ACZmB;AACoB;AACC;AAKhE;IAGE,2BACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAC1B,CAAC;IAGD,sCAAU,GAAV,UAAW,IAAY;QAAvB,iBAUC;QATC,IAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,eAAK;YAClC,IAAM,GAAG,GAAM,GAAG,UAAO,CAAC;YAC1B,IAAM,WAAW,GAAG,IAAI,gEAAW,CAAC;gBAClC,cAAc,EAAE,YAAY;gBAC5B,eAAe,EAAE,KAAG,KAAO;aAC5B,CAAC,CAAC;YACH,OAAO,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR,UAAS,GAAW;QAClB,IAAM,IAAI,GAAG;YACX,QAAQ,EAAE,qEAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,qEAAW,CAAC,YAAY;SACnC,CAAC;QACF,IAAM,GAAG,GAAM,GAAG,WAAQ,CAAC;QAC3B,IAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,QAAQ,EAAE,uCAAuC;aAClD,CAAC;YACF,cAAc,EAAE,MAAgB;SACjC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,SAAS,EAAE,CAAC;IAC5D,CAAC;IAED,wCAAY,GAAZ,UAAa,IAAY;QACvB,QAAQ,IAAI,EAAE;YACZ,KAAK,4BAA4B;gBAC/B,OAAO,qEAAW,CAAC,cAAc,CAAC;YACpC,KAAK,2BAA2B;gBAC9B,OAAO,qEAAW,CAAC,aAAa,CAAC;YACnC,KAAK,0BAA0B;gBAC7B,OAAO,qEAAW,CAAC,YAAY,CAAC;YAClC;gBACA,OAAO,qEAAW,CAAC,cAAc,CAAC;SACnC;IACH,CAAC;IA9CU,iBAAiB;QAH7B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAKgB,+DAAU;OAJf,iBAAiB,CAgD7B;IAAD,wBAAC;CAAA;AAhD6B","file":"pages-compare-compare-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ComparePage } from './compare.page';\nimport { MatTableModule, MatPaginatorModule } from '@angular/material';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ComparePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MatTableModule,\n    MatPaginatorModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ComparePage]\n})\nexport class ComparePageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Compare Data</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <ion-item>\\n      <ion-label color=\\\"orange\\\">Seleccionar nodo a comparar</ion-label>\\n      <ion-select (ionChange)=\\\"onSelectChange($event)\\\">\\n        <ion-select-option>peer0.asturias.antonio.com</ion-select-option>\\n        <ion-select-option>peer0.brasil.antonio.com</ion-select-option>\\n        <ion-select-option>peer0.chicago.antonio.com</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n  </div>\\n</div>\\n<div class=\\\"row\\\">\\n   <div class=\\\"col-md-6\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-header card-header-orange\\\">\\n                <h4 class=\\\"card-title \\\">Datos blockchain</h4>\\n                <p class=\\\"card-category\\\"> Todos los datos guardados en la blockchain</p>\\n            </div>\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"table-responsive\\\">\\n                    <table class=\\\"table\\\" [dataSource]=\\\"dataSourceAuditory\\\" mat-table>\\n                        <!-- Position Column -->\\n                        <ng-container matColumnDef=\\\"Key\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> ID </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Key}} </td>\\n                        </ng-container>\\n\\n                        <!-- Name Column -->\\n                        <ng-container matColumnDef=\\\"temp\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Temperatura </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Record.temperature}} </td>\\n                        </ng-container>\\n\\n                        <!-- Weight Column -->\\n                        <ng-container matColumnDef=\\\"device\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Device </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Record.device}} </td>\\n                        </ng-container>\\n\\n                        <!-- Symbol Column -->\\n                        <ng-container  matColumnDef=\\\"gps\\\">\\n                          <th [ngStyle]=\\\"{'display':!size?'none':''}\\\" mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Coordenates </th>\\n                          <td [ngStyle]=\\\"{'display':!size?'none':''}\\\"mat-cell *matCellDef=\\\"let element\\\"> {{element.Record.gps}} </td>\\n                        </ng-container>\\n\\n                        <ng-container  matColumnDef=\\\"node\\\">\\n                          <th [ngStyle]=\\\"{'display':!size?'none':''}\\\" mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Node </th>\\n                          <td [ngStyle]=\\\"{'display':!size?'none':''}\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.Record.node}} </td>\\n                        </ng-container>\\n\\n                        <ng-container matColumnDef=\\\"time\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Hour </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Record.hour}} </td>\\n                        </ng-container>\\n\\n                        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n                        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"col-md-6\\\">\\n        <div class=\\\"card\\\">\\n            <div class=\\\"card-header card-header-orange\\\">\\n                <h4 class=\\\"card-title \\\">Datos local</h4>\\n                <p class=\\\"card-category\\\"> Todos los datos guardados en la BBDD local</p>\\n            </div>\\n            <div class=\\\"card-body\\\">\\n                <div class=\\\"table-responsive\\\">\\n                    <table class=\\\"table\\\" [dataSource]=\\\"dataSourceRead\\\" mat-table>\\n                        <!-- Position Column -->\\n                        <ng-container matColumnDef=\\\"Key\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> ID </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n                        </ng-container>\\n\\n                        <!-- Name Column -->\\n                        <ng-container matColumnDef=\\\"temp\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Temperatura </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.temperature}} </td>\\n                        </ng-container>\\n\\n                        <!-- Weight Column -->\\n                        <ng-container matColumnDef=\\\"device\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Device </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.device}} </td>\\n                        </ng-container>\\n\\n                        <!-- Symbol Column -->\\n                        <ng-container  matColumnDef=\\\"gps\\\">\\n                          <th [ngStyle]=\\\"{'display':!size?'none':''}\\\" mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Coordenates </th>\\n                          <td [ngStyle]=\\\"{'display':!size?'none':''}\\\"mat-cell *matCellDef=\\\"let element\\\"> {{element.gps}} </td>\\n                        </ng-container>\\n\\n                        <ng-container  matColumnDef=\\\"node\\\">\\n                          <th [ngStyle]=\\\"{'display':!size?'none':''}\\\" mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Node </th>\\n                          <td [ngStyle]=\\\"{'display':!size?'none':''}\\\" mat-cell *matCellDef=\\\"let element\\\"> {{element.node}} </td>\\n                        </ng-container>\\n\\n                        <ng-container matColumnDef=\\\"time\\\">\\n                          <th mat-header-cell *matHeaderCellDef class=\\\" text-primary\\\"> Hour </th>\\n                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.hour}} </td>\\n                        </ng-container>\\n\\n                        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n                        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n                    </table>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n  </div>\\n</ion-content>\\n\"","module.exports = \"ion-select {\\n  padding-top: 40px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvY29tcGFyZS9DOlxcVXNlcnNcXGFudG9uXFxEZXNrdG9wXFxURkdcXFJlcG9zXFxDbGllbnQtQXVkaXRvcnkvc3JjXFxhcHBcXHBhZ2VzXFxjb21wYXJlXFxjb21wYXJlLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFpQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvY29tcGFyZS9jb21wYXJlLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1zZWxlY3R7XHJcbiAgICBwYWRkaW5nLXRvcDogNDBweDtcclxufVxyXG4iXX0= */\"","import { DeviceReadService } from './../../services/device-read/device-read.service';\nimport { UserService } from './../../services/user/user.service';\nimport { DeviceService } from './../../services/device/device.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatPaginatorModule, MatTableDataSource } from '@angular/material';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-compare',\n  templateUrl: './compare.page.html',\n  styleUrls: ['./compare.page.scss'],\n})\nexport class ComparePage implements OnInit {\n\n  size: boolean;\n  displayedColumns: string[] = ['Key', 'temp', 'device', 'gps', 'node', 'time'];\n  dataSourceAuditory;\n  dataSourceRead;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  constructor(\n    private deviceApi: DeviceService,\n    private deviceReadApi: DeviceReadService,\n    private userApi: UserService,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    this.cargarDatos('peer0.asturias.antonio.com');\n  }\n\n  cargarDatos(nodo) {\n    this.cargarBlockchainData(nodo);\n    this.cargarLocalData(nodo);\n  }\n\n  cargarBlockchainData(nodo) {\n    this.deviceApi.getByNodo(nodo).subscribe(res => {\n      let data = [];\n      let temp = [];\n      for (const key in res) {\n        const date = new Date(parseInt(res[key]['Record']['hour']));\n        res[key]['Record']['hour'] = date.toLocaleDateString() + ' ' + date.toLocaleTimeString()\n        data.push(res[key]);\n      }\n      temp = data.sort(function(a,b){\n        if (parseInt(a.Key.match(/\\d+/)[0]) > parseInt(b.Key.match(/\\d+/)[0])) {\n          return 1;\n        }\n        else if (parseInt(a.Key.match(/\\d+/)[0]) < parseInt(b.Key.match(/\\d+/)[0])) {\n          return -1;\n        }\n        return 0;\n      });\n      this.dataSourceAuditory = new MatTableDataSource(temp);\n      } , err => {\n      console.log(err.status);\n      this.userApi.logout();\n      this.router.navigate(['/login'], { replaceUrl: true });\n    });\n  }\n\n  cargarLocalData(nodo) {\n    this.deviceReadApi.getAllData(nodo).then(value => {value.subscribe(res => {\n      let data = [];\n      for (const key in res) {\n        const date = new Date(parseInt(res[key]['hour']));\n        res[key]['hour'] = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n        data.push(res[key]);\n      }\n      this.dataSourceRead = new MatTableDataSource(data);\n    } , err => {\n      console.log(err.status);\n    })});\n  }\n\n  onSelectChange(selectedValue: any) {\n    this.cargarDatos(selectedValue.detail.value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceReadService {\n\n\n  constructor(\n    private http: HttpClient) {\n  }\n\n\n  getAllData(nodo: string) {\n    const url = this.getUrlByNodo(nodo);\n    return this.getToken(url).then(value => {\n      const uri = `${url}/data`;\n      const httpHeaders = new HttpHeaders({\n        'Content-Type': 'text/plain',\n        'Authorization': `${value}`\n      });\n      return this.http.get(uri, { headers: httpHeaders });\n    });\n  }\n\n  getToken(url: string) {\n    const data = {\n      userName: environment.userRead,\n      password: environment.passwordRead\n    };\n    const uri = `${url}/login`;\n    const HTTPOptions = {\n      headers: new HttpHeaders({\n        'Accept': 'text/html, application/xhtml+xml, */*',\n      }),\n      'responseType': 'text' as 'text'\n    }\n    return this.http.post(uri, data, HTTPOptions).toPromise();\n  }\n\n  getUrlByNodo(nodo: string) {\n    switch (nodo) {\n      case 'peer0.asturias.antonio.com':\n        return environment.ipReadAsturias;\n      case 'peer0.chicago.antonio.com':\n        return environment.ipReadChicago;\n      case 'peer0.brasil.antonio.com':\n        return environment.ipReadBrasil;\n      default:\n      return environment.ipReadAsturias;\n    }\n  }\n\n}\n"],"sourceRoot":""}